server.port=56081

spring.application.name=sharding-jdbc-simple-demo

#访问路径
#server.servlet.context-path=

spring.http.encoding.enabled=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.force=true

#如果bean重复定义则覆盖
spring.main.allow-bean-definition-overriding=true

#使用驼峰命名
mybatis.configuration.map-underscore-to-camel-case=true

#日志配置
logging.level.root = info
logging.level.org.springframework.web = info
logging.level.com.mobei.sharding  = debug
logging.level.druid.sql = debug

##################以下是分片规则##################

#定义多个数据源:名字可以任意
spring.shardingsphere.datasource.names=m0, m1, m2, s0

#配置数据源0(垂直分库:用户表的数据放在user_db库中)
spring.shardingsphere.datasource.m0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m0.url=jdbc:mysql://localhost:3306/user_db?useUnicode=true
spring.shardingsphere.datasource.m0.username=root
spring.shardingsphere.datasource.m0.password=123456

#配置数据源1
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/order_db_1?useUnicode=true
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456

#配置数据源2
spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3306/order_db_2?useUnicode=true
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=123456

#配置从数据源0
spring.shardingsphere.datasource.s0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.s0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.s0.url=jdbc:mysql://localhost:3306/user_db?useUnicode=true
spring.shardingsphere.datasource.s0.username=root
spring.shardingsphere.datasource.s0.password=123456

#分库策略:以user_id为分片键,分片策略为user_id % 2 + 1,user_id为偶数操作m1数据源,否则操作m2
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}

#指定t_order表(注意t_order是逻辑表,在数据库中是不存在的,可以任意写)的数据分布情况,即最终数据落到哪个实际的表
#配置数据节点:$->{1..2}是一种表达式写法,表示1-2,即下面的表达式有两种结果:m1.t_order_1、m1.t_order_2
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=m$->{1..2}.t_order_$->{1..2}
#垂直分库:数据源在m0,并且此时数据库中只有一张便,因此直接就是m0.t_user
#spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=m0.t_user


#主键列
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
#由于分库分表,为了避免主键重复,可以使用雪花算法做主键生成策略
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

#指定t_order表的分片策略,分片策略包括分片键和分片算法
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
#分片算法,当客户端发出一条添加语句的时候,sharding-jdbc会根据该算法将数据添加到真是的表中:$‐>{order_id % 2 + 1}:如果订单id为奇数则数据落在t_order_2表中,为偶数则落在t_order_1表中
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 2 + 1}

#虽然只有一张表,但是依然需要指定主键列和表
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=user_id
#分片算法,当客户端发出一条添加语句的时候,sharding-jdbc会根据该算法将数据添加到真是的表中:$‐>{order_id % 2 + 1}:如果订单id为奇数则数据落在t_order_2表中,为偶数则落在t_order_1表中
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user

# 指定t_dict为公共表
spring.shardingsphere.sharding.broadcast‐tables=t_dict

#主库从库逻辑数据源定义 ds0为user_db
spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-source-name=m0
spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-source-names=s0

#t_user分表策略,固定分配至ds0的t_user真实表
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ds0.t_user

# 打开sql输出日志:方便我们查看sharding-jdbc发出的真实sql
spring.shardingsphere.props.sql.show=true















